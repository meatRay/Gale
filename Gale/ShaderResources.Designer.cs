//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gale {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ShaderResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ShaderResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Gale.ShaderResources", typeof(ShaderResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///layout(location = 0) in vec3 position;
        ///
        ///uniform mat4 projection;
        ///uniform mat4 view;
        ///uniform mat4 model_matrix;
        ///
        ///out vec2 UV;
        ///
        ///void main(void)
        ///{
        ///    gl_Position = projection * view * model_matrix * vec4(position, 1.0);
        ///	UV = vec2(0.0, 0.0);
        ///}.
        /// </summary>
        internal static string _3d_vert_shader {
            get {
                return ResourceManager.GetString("_3d_vert_shader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///in vec2 UV;
        ///uniform sampler2D texture;
        ///uniform float music;
        ///
        ///out vec4 frag_colour;
        ///
        ///vec4 hold;
        ///
        ///void main() {
        ///	//frag_colour = vec4(UV.x, UV.y, 0.0f, 1.0f);
        ///	hold = texture( texture, UV );
        ///	frag_colour = vec4(hold.x, hold.y - music, hold.z - music, hold.w);
        ///}.
        /// </summary>
        internal static string default_frag_shader {
            get {
                return ResourceManager.GetString("default_frag_shader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///layout(location = 0) in vec2 position;
        ///layout(location = 1) in vec2 vertexUV;
        ///
        ///uniform float z;
        ///uniform mat4 projection;
        ///uniform mat4 view;
        ///uniform mat4 model_matrix;
        ///
        ///out vec2 UV;
        ///
        ///void main(void)
        ///{
        ///    gl_Position = projection * view * model_matrix * vec4(position, z, 1.0);
        ///	UV = vertexUV;
        ///}.
        /// </summary>
        internal static string default_vert_shader {
            get {
                return ResourceManager.GetString("default_vert_shader", resourceCulture);
            }
        }
    }
}
